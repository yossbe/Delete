*&---------------------------------------------------------------------*
*&  Include           ZPP_CLASS_ALV_CLS
*&---------------------------------------------------------------------*

"Local class to handle events
CLASS lcl_MRP_alv DEFINITION.

  PUBLIC SECTION.
    METHODS single_click
                FOR EVENT link_click OF cl_salv_events_table
      IMPORTING row column.
    METHODS double_click
                FOR EVENT double_click OF cl_salv_events_table
      IMPORTING row column.
    METHODS func_click
                FOR EVENT added_function OF cl_salv_events
      IMPORTING e_salv_function.
    METHODS:

      CHECK_AUTORIZATION,
      get_all_MRP_data,
      set_alv_functions,
      set_alv_columns,
      display_MRP_alv.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA: lo_alv    TYPE REF TO cl_salv_table,
*          lt_MRP TYPE TABLE OF marc.
          gt_output type TABLE OF t_MRP_add,
          lt_MRP    TYPE TABLE OF t_MRP_add.

ENDCLASS.

CLASS lcl_MRP_alv IMPLEMENTATION.

  METHOD CHECK_AUTORIZATION.
    CALL FUNCTION 'AUTHORITY_CHECK_TCODE'
      EXPORTING
        TCODE  = 'MD04'
      EXCEPTIONS
        OK     = 1
        NOT_OK = 2
        OTHERS = 3.
    if SY-SUBRC <> 1.
      MESSAGE `No autorization to MD04`
            TYPE 'E'.
      EXIT .
    endif.

    DATA: GT_T001W TYPE TABLE OF T001W .
    DATA: GT_MARC TYPE TABLE OF MARC .
    DATA  LV_FLAG TYPE C.
    CLEAR LV_FLAG .
    SELECT DISTINCT marc~WERKS , DISPO INTO CORRESPONDING FIELDS OF TABLE @GT_MARC[]
      FROM MARC INNER JOIN MARA on marc~matnr = mara~matnr
      LEFT JOIN PGMI ON mara~matnr = pgmi~NRMIT AND marc~WERKS = pgmi~WEMIT
       WHERE marc~WERKS IN @SO_WERKS AND
        marc~MATNR in @SO_MATNR AND
        mtart in @so_mtart and
        MATKL in @so_MATKL and
        MEINS in @so_MEINS and
        dispo in @so_dispo and
        EKGRP in @so_EKGRP and
        dismm in @so_dismm and
        MMSTA in @so_MMSTA and
        PLIFZ in @so_PLIFZ and
        BESKZ in @so_BESKZ and
        EISBE in @so_EISBE and
        marc~LVORM in @so_LVORM.


    LOOP AT GT_MARC into data(wa_marc).
      AUTHORITY-CHECK OBJECT 'M_MTDI_ORG' "Organizational Levels for Material Requirements Planning
       ID 'MDAKT' FIELD 'A'               "Activity types in materials planni, A=MRP: current stock/requirements list
       ID 'DISPO' FIELD wa_marc-dispo
       ID 'WERKS' FIELD wa_marc-WERKS.
      IF SY-SUBRC <> 0.
        LV_FLAG = 'X' .
        EXIT .
      ENDIF.
      CLEAR wa_marc .
    ENDLOOP.
    IF LV_FLAG IS NOT INITIAL.
      MESSAGE `No autorization for MRP Controller : ` && wa_marc-dispo && 'in' && wa_marc-werks  TYPE 'E'.
      EXIT .
    ENDIF.


  ENDMETHOD.
  METHOD display_MRP_alv.

    TRY.

        cl_salv_table=>factory(
      IMPORTING
        r_salv_table   = lo_alv                          " Basis Class Simple ALV Tables
          CHANGING
            t_table        = gt_output "lt_MRP
        ).


        set_alv_functions( ).

        set_alv_columns( ).
        "Setting table rows to a striped pattern
        lo_alv->get_display_settings( )->set_striped_pattern( abap_true ).

        "Displaying/hiding horizontal and vertical grid lines (here, they're hidden)
        lo_alv->get_display_settings( )->set_horizontal_lines( abap_true ). "abap_false
        lo_alv->get_display_settings( )->set_vertical_lines( abap_true ). "abap_false

        "add dynamic title (instead of title from grogram Attributes
        lo_alv->get_display_settings( )->set_list_header( text-099 ). "Aggrigate Material Movements

        "Enable Save ALV Layout
        ls_key-report = sy-repid.
        lo_layout = lo_alv->get_layout( ).
        lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
        lo_layout->set_key( ls_key ).

***Enable Save Default Layout
        if p_var is not INITIAL.
          lo_layout->SET_INITIAL_LAYOUT( p_var ).    "set layout from selction screen
        else.
          lo_layout->set_default( abap_true ).      "set default layout
        endif.
        "Selections
        lo_selections = lo_alv->get_selections( ).
        lo_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).  "row_column enable mupliple selection / single = only 1 row/

        SET HANDLER double_click FOR lo_alv->get_event( ).
        SET HANDLER FUNC_CLICK FOR lo_alv->get_event( ).

        "column color
        lo_alv->GET_COLUMNS( )->SET_COLOR_COLUMN( 'ALV_COLOR').
        data(o_col) = cast cl_salv_column_table( lo_alv->GET_COLUMNS( )->GET_COLUMN( 'MATNR' ) ).
        o_col->set_color( VALUE #( col = 5 int = 0 inv = 0 ) ).

        o_col = cast cl_salv_column_table( lo_alv->GET_COLUMNS( )->GET_COLUMN( 'MAKTX' ) ).
        o_col->set_color( VALUE #( col = 5 int = 0 inv = 0 ) ).

        o_col = cast cl_salv_column_table( lo_alv->GET_COLUMNS( )->GET_COLUMN( 'HISTORY' ) ).
        o_col->set_color( VALUE #( col = 1 int = 0 inv = 0 ) ).


        data(lo_sort) = lo_alv->get_sorts( ).

*   Set the SORT on the WERKS with Subtotal
        CALL METHOD lo_sort->add_sort
          EXPORTING
            columnname = 'WERKS'
            POSITION   = 1
            SEQUENCE   = 2 "desc , 1 =ascending
            subtotal   = if_salv_c_bool_sap=>false.

        CALL METHOD lo_sort->add_sort
          EXPORTING
            columnname = 'MATNR'
            POSITION   = 2
            SEQUENCE   = 1 "2 = desc , 1 =ascending
            subtotal   = if_salv_c_bool_sap=>false.

*   Display ALV
        lo_alv->display( ).
      CATCH cx_salv_msg INTO DATA(lx_msg).             " ALV: General Error Class with Message
        cl_demo_output=>display( lx_msg ).
      CATCH CX_SALV_NOT_FOUND INTO DATA(lx_msg2).      " ALV: General Error Class with Message
        cl_demo_output=>display( lx_msg2 ).
      CATCH cx_salv_existing INTO DATA(lx_msg3).       "ALV: General Error Class (Checked During Syntax Check)
        cl_demo_output=>display( lx_msg3 ).
      CATCH cx_salv_data_error  INTO DATA(lx_msg4).    "ALV: General Error Class (Checked During Syntax Check)
        cl_demo_output=>display( lx_msg4 ).
    ENDTRY.
  ENDMETHOD.

  METHOD get_all_MRP_data.

    SELECT marc~werks,mara~matnr,BSTRF,BSTMA,SFCPF,FEVOR,FRTME  ,BESKZ,KZAUS,EISLO,marc~HERKL,MMSTD,MMSTA,PLIFZ,AUSDT,NFMAT,DISLS,EKGRP,BSTMI,MABST,WZEIT,STRGR,LGPRO,SOBSL,BSTFE,
      MINBE,EISBE,MAABC,DISMM,DISPO,MTART,mara~MATKL,meins,DISST, MAKTX,PRGRP,WGBEZ
    FROM MARC INNER JOIN MARA
      on marc~matnr = mara~matnr
      INNER JOIN MAKT
      on mara~matnr = makt~matnr
      LEFT JOIN PGMI ON mara~matnr = pgmi~NRMIT AND marc~WERKS = pgmi~WEMIT
      LEFT JOIN t023t ON mara~MATKL = t023t~MATKL
    WHERE
      mara~matnr in @so_matnr and
      marc~werks in @so_werks and
      mtart in @so_mtart and
      mara~matkl in @so_MATKL and
      MEINS in @so_MEINS and
      dispo in @so_dispo and
      EKGRP in @so_EKGRP and
      dismm in @so_dismm and
      MMSTA in @so_MMSTA and
      PLIFZ in @so_PLIFZ and
      BESKZ in @so_BESKZ and
      EISBE in @so_EISBE and
      makt~spras EQ @sy-langu  and
      T023T~spras EQ @sy-langu  and
      PRGRP in @so_PRGRP and
      marc~LVORM in @so_LVORM
    INTO CORRESPONDING FIELDS OF TABLE @lt_MRP.

* limit the number of records
    data(No_records) = 0.
    DESCRIBE TABLE  lt_MRP LINES No_records.
    if No_records > 10000.
      MESSAGE 'Too many records selected (Max 10,000): ' && No_records  TYPE 'E'.
      EXIT .
    elseif No_records = 0.
      MESSAGE 'No records were selected'  TYPE 'E'.
      EXIT .
    endif.

*    clear: z_end_date, end_date.
    LOOP AT lt_mrp ASSIGNING FIELD-SYMBOL(<wa_mrp>).

      CALL FUNCTION 'MD_STOCK_REQUIREMENTS_LIST_API'
        EXPORTING
          PLSCN                    = '000'
          MATNR                    = <wa_mrp>-matnr
          WERKS                    = <wa_mrp>-werks
          BERID                    = S_MRP_AR
          ERGBZ                    = SEL_RULE
          AFIBZ                    = FILTER_D
*         INPER                    = 'M'
*         DISPLAY_LIST_MDPSX       =
*         DISPLAY_LIST_MDEZX       =
*         DISPLAY_LIST_MDSUX       =
*         NOBUF                    =
        IMPORTING
          E_MT61D                  = wa_mt61d "Row
          E_MDKP                   = wa_MDKP "Row
*         E_CM61M                  =
          E_MDSTA                  = wa_MDSTA "Row
        TABLES
*         MDPSX                    =
          MDEZX                    = it_mdezx "table
*         MDSUX                    =
        EXCEPTIONS
          MATERIAL_PLANT_NOT_FOUND = 1
          PLANT_NOT_FOUND          = 2
          OTHERS                   = 3.
      IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.


      delete it_mdezx where PLANR <> ''.
      delete it_mdezx where dat00 not in so_date.
      LOOP AT it_mdezx INTO wa_mdezx  WHERE dat00 in so_date.

        if <wa_mrp>-ex_cancel is INITIAL AND wa_mdezx-AUSSL = 'U3' AND wa_mdezx-AUSKT = '20'.
          <wa_mrp>-ex_cancel = wa_mdezx-dat00.
        ENDIF.
        if <wa_mrp>-ex_sch_in is INITIAL AND wa_mdezx-AUSSL = 'U1' AND wa_mdezx-AUSKT = '10'.
          <wa_mrp>-ex_sch_in = wa_mdezx-dat00.
        ENDIF.
        if <wa_mrp>-ex_sch_in is INITIAL AND wa_mdezx-AUSSL = 'U4' AND wa_mdezx-AUSKT = '30'.
          <wa_mrp>-ex_sch_in = wa_mdezx-dat00.
        ENDIF.
        if <wa_mrp>-ex_sch_out is INITIAL AND wa_mdezx-AUSSL = 'U2' AND wa_mdezx-AUSKT = '15'.
          <wa_mrp>-ex_sch_out = wa_mdezx-dat00.
        ENDIF.
*********************************************************
        CASE wa_mdezx-DELKZ.
*----------------Reciept------------------
          WHEN 'PA'. "planned order
            <wa_mrp>-PLANED_ORDER = <wa_mrp>-PLANED_ORDER + wa_mdezx-mng01.
            <wa_mrp>-z_pln_recp = <wa_mrp>-z_pln_recp + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
          WHEN 'BE'. "purchase order
            <wa_mrp>-z_po = <wa_mrp>-z_po + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
          WHEN 'FE'. "production order - PP
            <wa_mrp>-z_prod = <wa_mrp>-z_prod + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
          WHEN 'BR'. "process order - PI
            <wa_mrp>-Z_proc_order = <wa_mrp>-Z_proc_order + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
          WHEN 'BA'. "purchase req'
            <wa_mrp>-z_PurRqs = <wa_mrp>-z_PurRqs + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_pln_recp = <wa_mrp>-z_pln_recp + wa_mdezx-mng01.
          WHEN 'LA'. "shipment notification
            <wa_mrp>-z_ShpgNt = <wa_mrp>-z_ShpgNt + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
*            if Z_EBTYP = 'LA'.
*              LA_SHPGNT = LA_SHPGNT + wa_mdezx-mng01.
*            ENDIF. "
          WHEN 'QM'.
            <wa_mrp>-z_Qm_lot = <wa_mrp>-z_Qm_lot + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
          WHEN 'LE'. "SchLne from vendor
            <wa_mrp>-PO_SCH_AGR = <wa_mrp>-PO_SCH_AGR + wa_mdezx-mng01.
            <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
            <wa_mrp>-z_fix_recp = <wa_mrp>-z_fix_recp + wa_mdezx-mng01.
*----------------Requirements------------------
          WHEN 'BB'. "Sub Req from PO or PR
            <wa_mrp>-SUBREQ = <wa_mrp>-SUBREQ + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            if wa_mdezx-LIFNR is not INITIAL. "no vendor therefore it's PR
              <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
            ENDIF.
          WHEN 'VC'. "sales order
            <wa_mrp>-z_so = <wa_mrp>-z_so + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'VJ'. "delivery
            <wa_mrp>-z_del = <wa_mrp>-z_del + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'VI'. "free delivery
            <wa_mrp>-free_del = <wa_mrp>-free_del + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'PP'. "PIR
            <wa_mrp>-Z_PIR = <wa_mrp>-Z_PIR + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
*            if FIX_FORC = ''. "include forecast as FIX issue?
            <wa_mrp>-z_pln_req = <wa_mrp>-z_pln_req + wa_mdezx-mng01 * -1.
*            ELSE.
*              z_fix_req = z_fix_req + wa_mdezx-mng01 * -1.
*            ENDIF.
          WHEN 'AR'. "order reservasion
            <wa_mrp>-Z_OrdRes = <wa_mrp>-Z_OrdRes + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'SB'. "dependent reservasion
            <wa_mrp>-z_DepReq = <wa_mrp>-z_DepReq + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_pln_req = <wa_mrp>-z_pln_req + wa_mdezx-mng01 * -1.
          WHEN 'VE'.
            <wa_mrp>-z_SchAgr = <wa_mrp>-z_SchAgr + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'RP'.
            <wa_mrp>-z_Return = <wa_mrp>-z_Return + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
*--------------U* = inter company------------------------------
          WHEN 'U1'. "
            <wa_mrp>-z_Ord_Ds = <wa_mrp>-z_Ord_Ds + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_fix_req = <wa_mrp>-z_fix_req + wa_mdezx-mng01 * -1.
          WHEN 'U2'.
            <wa_mrp>-z_PrqRel = <wa_mrp>-z_PrqRel + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_pln_req = <wa_mrp>-z_pln_req + wa_mdezx-mng01 * -1.
          WHEN 'U3'.
            <wa_mrp>-z_PloRel = <wa_mrp>-z_PloRel + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            <wa_mrp>-z_pln_req = <wa_mrp>-z_pln_req + wa_mdezx-mng01 * -1.
*------------stock------------
          WHEN 'WB'.
            <wa_mrp>-stock = wa_mdezx-mng01.
          WHEN 'LB'.
            IF SPER_STR = 'X'. "storage at plant level <> X
              <wa_mrp>-stock = <wa_mrp>-stock + wa_mdezx-mng01.
            ENDIF.
*          WHEN 'KB'. "customer stock
*            MTO_stock = MTO_stock + wa_mdezx-mng01.
          WHEN OTHERS.
            IF wa_mdezx-PLUMI ='-'.
              <wa_mrp>-z_tot_req = <wa_mrp>-z_tot_req + wa_mdezx-mng01 * -1.
            else.
              IF wa_mdezx-PLUMI ='+'.
                <wa_mrp>-z_tot_rec = <wa_mrp>-z_tot_rec + wa_mdezx-mng01.
              ENDIF.
            ENDIF.
        ENDCASE.
      ENDLOOP.
      check <wa_mrp>-z_tot_rec <> 0 OR <wa_mrp>-z_tot_req <> 0 OR <wa_mrp>-stock <> 0 .

      <wa_mrp>-FREE_STOCK = <wa_mrp>-stock  - <wa_mrp>-z_fix_req.                           "Free Stock
      <wa_mrp>-open_qty = <wa_mrp>-z_fix_recp + <wa_mrp>-stock - <wa_mrp>-z_tot_req.        "Open Qty
      <wa_mrp>-open_qty_fix = <wa_mrp>-z_fix_recp + <wa_mrp>-stock - <wa_mrp>-z_fix_req.    "Open Qty Fix

* add days of supply
      <wa_mrp>-DAY_SUPPLY = wa_MDKP-BERW1.
      <wa_mrp>-DAY_SUPPLY_1 = wa_MDKP-BERW2.
    ENDLOOP.


    gt_output = lt_MRP.

    "Row color
    LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<f>).
      if <f>-EX_CANCEL is NOT INITIAL.
        <f>-alv_color = VALUE #( ( color-col = 6
                                 color-int = 0
                                 color-inv = 1 ) ).
      ENDIF.
      <f>-HISTORY = p_mb51.
    ENDLOOP.

  ENDMETHOD.  "get_all_MRP_data


  METHOD set_alv_functions.

    DATA(lo_alv_functions_list) = lo_alv->get_functions( ).
    lo_alv_functions_list->set_all( if_salv_c_bool_sap=>true ).

    lo_alv->set_screen_status(
        pfstatus      = 'STANDARD'
        report        = SY-CPROG   " copy frpm program 'SAPLSALV' (transaction SE41 >> Copy Status)
        set_functions = lo_alv->c_functions_all ).

*    lo_alv_functions_list->set_sort_asc( if_salv_c_bool_sap=>false ).
*    lo_alv_functions_list->set_sort_desc( if_salv_c_bool_sap=>false ).

  ENDMETHOD.

  METHOD set_alv_columns.

    TRY.
        DATA(lo_columns) = lo_alv->get_columns( ).
        lo_columns->set_optimize( abap_true ).

* Hide the client (MANDT) column
*        DATA(lo_column_mandt) = lo_columns->get_column( 'MANDT' ).
*        lo_column_mandt->set_visible( if_salv_c_bool_sap=>false ).

        DATA(lo_column_name) = lo_columns->get_column( 'PLANED_ORDER' ).
        lo_column_name->set_short_text( |{ text-101 }| ). "'PlanOrd' ).
        lo_column_name->set_medium_text( |{ text-102 }| ). "'Plan Order' ).
        lo_column_name->set_long_text( |{ text-102 }| ). "'Plan Order' ).

        lo_column_name = lo_columns->get_column( 'Z_PIR' ).
        lo_column_name->set_short_text( 'PIR' ).
        lo_column_name->set_medium_text( 'Plan ind req' ).
        lo_column_name->set_long_text( 'Planned ind req' ).

        lo_column_name = lo_columns->get_column( 'Z_PO' ).
        lo_column_name->set_short_text( 'PurOrd' ).
        lo_column_name->set_medium_text( 'PurchOrd' ).
        lo_column_name->set_long_text( 'Purchase order' ).

        lo_column_name = lo_columns->get_column( 'Z_PROD' ).
        lo_column_name->set_short_text( 'ProdOrd' ).
        lo_column_name->set_medium_text( 'ProdOrd' ).
        lo_column_name->set_long_text( 'Production Order' ).

        lo_column_name = lo_columns->get_column( 'Z_DEL' ).
        lo_column_name->set_short_text( 'Delivery' ).
        lo_column_name->set_medium_text( 'Delivery' ).
        lo_column_name->set_long_text( 'Delivery' ).

        lo_column_name = lo_columns->get_column( 'Z_ORDRES' ).
        lo_column_name->set_short_text( 'DependRes' ).
        lo_column_name->set_medium_text( 'DependRes' ).
        lo_column_name->set_long_text( 'Dependent reservation' ).

        lo_column_name = lo_columns->get_column( 'Z_DEPREQ' ).
        lo_column_name->set_short_text( 'Depend.res' ).
        lo_column_name->set_medium_text( 'Depend. res' ).
        lo_column_name->set_long_text( 'Depend. res' ).

        lo_column_name = lo_columns->get_column( 'Z_PURRQS' ).
        lo_column_name->set_short_text( 'PurcReq' ).
        lo_column_name->set_medium_text( 'Purchase req.' ).
        lo_column_name->set_long_text( 'Purchase req' ).

        lo_column_name = lo_columns->get_column( 'Z_ORD_DS' ).
        lo_column_name->set_short_text( 'STO' ).
        lo_column_name->set_medium_text( 'stockTranOrd' ).
        lo_column_name->set_long_text( 'stockTranOrd' ).

        lo_column_name = lo_columns->get_column( 'Z_SHPGNT' ).
        lo_column_name->set_short_text( 'ShipNotif' ).
        lo_column_name->set_medium_text( 'ShipNotif' ).
        lo_column_name->set_long_text( 'Shipping notif' ).

        lo_column_name = lo_columns->get_column( 'Z_QM_LOT' ).
        lo_column_name->set_short_text( 'QM LOT' ).
        lo_column_name->set_medium_text( 'QM LOT' ).
        lo_column_name->set_long_text( 'QM LOT' ).

        lo_column_name = lo_columns->get_column( 'Z_RETURN' ).
        lo_column_name->set_short_text( 'Return' ).
        lo_column_name->set_medium_text( 'Return' ).
        lo_column_name->set_long_text( 'Return' ).

        lo_column_name = lo_columns->get_column( 'Z_SO' ).
        lo_column_name->set_short_text( 'SaleOrd' ).
        lo_column_name->set_medium_text( 'Sale Order' ).
        lo_column_name->set_long_text( 'Sale Order' ).

        lo_column_name = lo_columns->get_column( 'Z_FIX_RECP' ).
        lo_column_name->set_short_text( 'Fix Recpt' ).
        lo_column_name->set_medium_text( 'Fix Recpt' ).
        lo_column_name->set_long_text( 'Fix Recpt' ).

        lo_column_name = lo_columns->get_column( 'Z_PLN_RECP' ).
        lo_column_name->set_short_text( 'PlanRecpt' ).
        lo_column_name->set_medium_text( 'Plan Receipt' ).
        lo_column_name->set_long_text( 'Plan Receipt' ).

        lo_column_name = lo_columns->get_column( 'Z_FIX_REQ' ).
        lo_column_name->set_short_text( 'Fix Issue' ).
        lo_column_name->set_medium_text( 'Fix Issue' ).
        lo_column_name->set_long_text( 'Fix Issue' ).

        lo_column_name = lo_columns->get_column( 'Z_PLN_REQ' ).
        lo_column_name->set_short_text( 'Plan Issue' ).
        lo_column_name->set_medium_text( 'Plan Issue' ).
        lo_column_name->set_long_text( 'Plan Issue' ).

        lo_column_name = lo_columns->get_column( 'Z_TOT_REC' ).
        lo_column_name->set_short_text( 'Tot Recp' ).
        lo_column_name->set_medium_text( 'Tot Recp' ).
        lo_column_name->set_long_text( 'Tot Recp' ).

        lo_column_name = lo_columns->get_column( 'Z_TOT_REQ' ).
        lo_column_name->set_short_text( 'Tot Req' ).
        lo_column_name->set_medium_text( 'Tot Req' ).
        lo_column_name->set_long_text( 'Tot Req' ).

        lo_column_name = lo_columns->get_column( 'OPEN_QTY' ).
        lo_column_name->set_short_text( 'OpenQty' ).
        lo_column_name->set_medium_text( 'Open Qty' ).
        lo_column_name->set_long_text( 'Open Qty' ).

        lo_column_name = lo_columns->get_column( 'OPEN_QTY_FIX' ).
        lo_column_name->set_short_text( 'OpenQtyFix' ).
        lo_column_name->set_medium_text( 'Open Qty Fix' ).
        lo_column_name->set_long_text( 'Open Qty Fix' ).

        lo_column_name = lo_columns->get_column( 'FREE_STOCK' ).
        lo_column_name->set_short_text( '	FreeSt' ).
        lo_column_name->set_medium_text( 'Free Stock' ).
        lo_column_name->set_long_text( 'Free Stock = stock - Fix_issue' ).

        lo_column_name = lo_columns->get_column( 'AV_ST_MINUS_REO' ).
        lo_column_name->set_short_text( 'Free-ReO' ).
        lo_column_name->set_medium_text( 'FreeSt-Reord.P' ).
        lo_column_name->set_long_text( 'FreeSt - Reord.Point' ).

        lo_column_name = lo_columns->get_column( 'EX_CANCEL' ).
        lo_column_name->set_short_text( 'Cancel' ).
        lo_column_name->set_medium_text( 'EX Cancel' ).
        lo_column_name->set_long_text( 'Cancel' ).

        lo_column_name = lo_columns->get_column( 'EX_NEGATIVE' ).
        lo_column_name->set_short_text( 'NegtSt' ).
        lo_column_name->set_medium_text( 'Negtive Stock' ).
        lo_column_name->set_long_text( 'EX Negtive Stock' ).

        lo_column_name = lo_columns->get_column( 'EX_SCH_IN' ).
        lo_column_name->set_short_text( 'SchedIn' ).
        lo_column_name->set_medium_text( 'Schedule in' ).
        lo_column_name->set_long_text( 'Schedule in' ).

        lo_column_name = lo_columns->get_column( 'EX_SCH_OUT' ).
        lo_column_name->set_short_text( 'SchedOut' ).
        lo_column_name->set_medium_text( 'Schedule Out' ).
        lo_column_name->set_long_text( 'Schedule Out' ).

        lo_column_name = lo_columns->get_column( 'HISTORY' ).
        lo_column_name->set_short_text( 'ZMM_MB51' ).
        lo_column_name->set_medium_text( 'ZMM_MB51' ).
        lo_column_name->set_long_text( 'ZMM_MB51' ).

      CATCH cx_salv_not_found INTO DATA(lx_msg). " ALV: General Error Class (Checked During Syntax Check)
        cl_demo_output=>display( lx_msg ).

    ENDTRY.

  ENDMETHOD.

  METHOD single_click.
    "Both single and double click events trigger messages.
    READ TABLE gt_output INDEX row REFERENCE INTO DATA(sc_ref).
    IF sy-subrc = 0.
      ASSIGN sc_ref->(column) TO FIELD-SYMBOL(<fs_sc>).
      MESSAGE `Single click event. ` &&
      |Row: { row } { COND #( WHEN column IS NOT INITIAL THEN `Column: ` && column ) } | &&
      |{ COND #( WHEN <fs_sc> IS ASSIGNED THEN `Value: ` && <fs_sc> ) }| TYPE 'I'.
    ELSE.
      MESSAGE `Single click event` TYPE 'I'.
    ENDIF.
  ENDMETHOD.
  METHOD double_click.
    READ TABLE gt_output INDEX row REFERENCE INTO DATA(dc_ref).
    IF sy-subrc = 0.
      ASSIGN dc_ref->(column) TO FIELD-SYMBOL(<fs_dc>).
**      MESSAGE `Double click event. ` &&
**      |Row: { row } { COND #( WHEN column IS NOT INITIAL THEN `Column: ` && column ) } | &&
**      |{ COND #( WHEN <fs_dc> IS ASSIGNED THEN `Value: ` && <fs_dc> ) }| TYPE 'I'.
      case  column.
        when   'PLANED_ORDER'  or 'Z_PIR' or 'Z_PO' or 'Z_PROD' or 'Z_PROC_ORDER' or 'Z_DEL' or 'Z_ORDRES' or 'Z_DEPREQ' or 'Z_PURRQS' or 'Z_ORD_DS' or 'Z_SHPGNT' or 'Z_PRQREL' or 'Z_PLOREL' or 'Z_QM_LOT' or 'Z_SCHAGR' or 'Z_RETURN' or 'Z_SO'
              or 'PO_SCH_AGR' or 'SUBREQ' or 'FREE_DEL' or 'Z_FIX_RECP' or 'Z_PLN_RECP' or 'Z_FIX_REQ' or 'Z_PLN_REQ' or 'Z_TOT_REC' or 'Z_TOT_REQ' or  'OPEN_QTY' or 'OPEN_QTY_FIX' or 'OPEN_QTY_VAL' or 'AV_ST_MINUS_' or 'AVAIL_STOCK'
              or 'EX_CANCEL'  or 'EX_NEGATIVE' or 'EX_SCH_IN' or 'EX_SCH_OUT'.

          .
          set PARAMETER ID 'MAT' field dc_ref->matnr.
          set PARAMETER ID 'BERID' field dc_ref->werks.
          set PARAMETER ID 'WRK' field dc_ref->werks.
          call TRANSACTION 'MD04' and SKIP FIRST SCREEN.

        when 'STOCK' .
          set PARAMETER ID 'MAT' field dc_ref->matnr.
          set PARAMETER ID 'WRK' FIELD dc_ref->werks.
          call TRANSACTION 'MMBE' WITHOUT AUTHORITY-CHECK and SKIP FIRST SCREEN.
        when 'MATNR' .
          SET PARAMETER ID 'MAT' FIELD dc_ref->matnr.
          SET PARAMETER ID 'WRK' FIELD dc_ref->werks.
          SET PARAMETER ID 'MXX' FIELD 'D' .
          CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN .
        when 'HISTORY'.

*          data(date_start) = CONV d( sy-datum - 365 ).
          SUBMIT ZMM_MB51_T
          USING SELECTION-SET p_mb51      "ZMM_MB51 variant for selection screen
*          with selection-table seltab
*                  WITH P_ALL_PR ...
*                  WITH P_DMBTR ...
*                  WITH P_VAR ...
                  WITH RB1 EQ ''
                  WITH RB2 EQ ''
                  WITH RB3 EQ  'X'
                  WITH RB4 EQ ''
                  WITH RB_AUFNR EQ ''
                  WITH RB_EBELN EQ ''
                  WITH RB_KUNNR EQ ''
                  WITH RB_LIFNR EQ ''
                  WITH RB_NONE EQ  'X'
                  WITH RB_VBELN EQ ''
                  WITH RB_VB_IN EQ ''
*                  WITH SO_AUART ...
*                  WITH SO_AUFNR ...
*                  WITH SO_AUTYP ...
*                  WITH SO_BSART ...
*                  WITH SO_BUDAT BETWEEN date_start AND sy-datum
*                  WITH SO_BWART ...
*                  WITH SO_DISMM ...
*                  WITH SO_DISPO ...
*                  WITH SO_EBELN ...
*                  WITH SO_EKGRP ...
*                  WITH SO_KUNNR ...
*                  WITH SO_LFART ...
*                  WITH SO_LGORT ...
*                  WITH SO_LIFNR ...
*                  WITH SO_MATKL ...
                  WITH SO_MATNR-low EQ dc_ref->matnr
*                  WITH SO_MTART ...
*                  WITH SO_USNAM ...
*                  WITH SO_VBELN ...
*                  WITH SO_VGART ...
                  WITH SO_WERKS-low EQ dc_ref->werks
                  and return.

*          ELSEIF rb_vbeln = rbSelected.
*            MOVE: 'XBLNR'  TO SELTAB_WA-SELNAME,
*              'S'      TO SELTAB_WA-KIND,      " SELECT-OPTION
*              'I'      TO SELTAB_WA-SIGN,
*              'EQ'     TO SELTAB_WA-OPTION,
*               dc_ref->vbeln_im   TO SELTAB_WA-LOW.
*            APPEND SELTAB_WA TO SELTAB.
*            clear: SELTAB_WA .
*
*          ENDIF.
*
*
*
*          submit RM07DOCS      "call transaction MB51
*                  with selection-table seltab
*                  WITH LGORT IN SO_LGORT    "storage location
*                  WITH BWART in SO_BWART    "movement type
**                  with VGART in so_VGART    "Trans./Event Type
*                  WITH USNAM in so_USNAM    "User name
*                  WITH mblnr-LOW  EQ ''
**                  WITH BWART-LOW  EQ ''
*                  WITH CHARG-LOW  EQ ''
**                  WITH XBLNR IN   so_vbeln
**                  WITH BWART BETWEEN '261' AND '262'
**                 via selection-screen  "enter selection screen first
*                 and return.
*
      endcase.
*    ELSE.
*      MESSAGE `Double click event` TYPE 'I'.
    ENDIF.
  ENDMETHOD.
  METHOD func_click.
    "Handling custom functions

    DATA: lt_rows TYPE salv_t_row,
          lt_cols TYPE salv_t_column.
*          ls_cell TYPE salv_s_cell.

    DATA(lr_selections)   = lo_alv->get_selections( ).
    DATA(ls_cell)         = lo_selections->get_current_cell( ).
    DATA(lt_seleced_rows) = lo_selections->get_selected_rows( ).

*    DATA: lr_selections TYPE REF TO cl_salv_selections.
    DATA row TYPE i.
    CASE e_salv_function.
      WHEN 'MONTH'.
        lt_rows = lo_selections->get_selected_rows( ).
        READ TABLE lt_rows INTO row INDEX 1.
        READ TABLE gt_output INDEX row REFERENCE INTO DATA(dc_ref).
        IF ls_cell-row > 0.
          READ TABLE gt_output INTO DATA(ls_output) INDEX ls_cell-row.
          CHECK sy-subrc = 0.
        ENDIF.

      WHEN 'REFRESH'.
*        MESSAGE `Custom function DATA. Refresh` TYPE 'I'.
*        DATA(dc_ref) =  gt_output->  INTO
        get_all_MRP_data( ).
        lo_alv->refresh( ).

      WHEN 'DAY'.
        DATA: SELTAB    TYPE TABLE OF RSPARAMS,
              SELTAB_WA LIKE LINE OF SELTAB.

        FIELD-SYMBOLS <fs_output> TYPE t_MRP_add.
        LOOP AT lt_seleced_rows INTO data(l_row).
          CLEAR ls_output.
          READ TABLE gt_output ASSIGNING <fs_output> INDEX l_row.

          MOVE: 'MATNR'  TO SELTAB_WA-SELNAME,
                'S'      TO SELTAB_WA-KIND,      " SELECT-OPTION
                'I'      TO SELTAB_WA-SIGN,
                'EQ'     TO SELTAB_WA-OPTION,
                <fs_output>-matnr     TO SELTAB_WA-LOW.
          APPEND SELTAB_WA TO SELTAB.
          CLEAR:SELTAB_WA.
          MOVE: 'WERKS'  TO SELTAB_WA-SELNAME,
                'S'      TO SELTAB_WA-KIND,      " SELECT-OPTION
                'I'      TO SELTAB_WA-SIGN,
                'EQ'     TO SELTAB_WA-OPTION,
                <fs_output>-werks     TO SELTAB_WA-LOW.
          APPEND SELTAB_WA TO SELTAB.
          CLEAR:SELTAB_WA.

          data(start_day) = CONV d( sy-datum - 1333 ).
          data(end_day) = sy-datum  .
        endloop.
        MOVE: 'BUDAT'          to seltab_wa-selname,
              'S'              to seltab_wa-kind,
              'I'      TO SELTAB_WA-SIGN,
              'BT'     TO SELTAB_WA-OPTION,
              start_day   TO SELTAB_WA-LOW,
              end_day    TO SELTAB_WA-high.
        APPEND SELTAB_WA TO SELTAB.
        CLEAR:SELTAB_WA.

        submit RM07DOCS      "call transaction MB51
                with selection-table seltab
*                  WITH LGORT IN SO_LGORT    "storage location
*                  WITH BWART in SO_BWART    "movement type
**                  with VGART in so_VGART    "Trans./Event Type
*                  WITH USNAM in so_USNAM    "User name
                WITH mblnr-LOW  EQ ''
*                  WITH BWART-LOW  EQ ''
                WITH CHARG-LOW  EQ ''
*                  WITH XBLNR IN   so_vbeln
*                  WITH BWART BETWEEN '261' AND '262'
*                 via selection-screen  "enter selection screen first
               and return.

      WHEN 'TOTAL'.
        MESSAGE `Custom function QUIT. Do something ...` TYPE 'I'.
      WHEN 'STOCK'.
        lt_rows = lo_selections->get_selected_rows( ).
        READ TABLE lt_rows INTO row INDEX 1.
        READ TABLE gt_output INDEX row REFERENCE INTO DATA(dc_ref2).
        set PARAMETER ID 'MAT' field dc_ref2->matnr.
        set PARAMETER ID 'WRK' FIELD dc_ref2->werks.
        call TRANSACTION 'MMBE' WITHOUT AUTHORITY-CHECK and SKIP FIRST SCREEN.
*        MESSAGE `Custom function QUIT. Do something ...` TYPE 'I'.
      WHEN OTHERS.
        MESSAGE `Some other function` TYPE 'I'.
    ENDCASE.
  ENDMETHOD.



ENDCLASS.
